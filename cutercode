#!/usr/bin/python
# vim:set encoding=utf-8 ft=python ts=8 sw=4 sts=4 et cindent:

# Copyright Â© 2010  Fabian Knittel <fabian.knittel@avona.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA.

import sys
from PyQt4 import QtGui
from PyQt4 import QtCore
from PyQt4 import uic
import os.path
import qrencode
import StringIO

DATA_PATH = os.path.dirname(sys.argv[0])

def pil_to_qpixmap(pil_image):
    buf = StringIO.StringIO()
    pil_image.save(buf, format='PNG')
    contents = buf.getvalue()
    buf.close()
    qpix = QtGui.QPixmap()
    qpix.loadFromData(contents)
    return qpix

class CuterCodeDialog(QtGui.QDialog):
    def __init__(self, default_text=None):
        QtGui.QDialog.__init__(self, None, QtCore.Qt.Window)
        self.default_text = default_text

        uic.loadUi(os.path.join(DATA_PATH, 'cutercode.ui'), self)
        QtCore.QObject.connect(self.plaintext,
                QtCore.SIGNAL("textChanged(QString)"),
                self.update_qrcode)

        if self.default_text is None:
            self.default_text = "Welcome to 'cutercode', a program to " \
                    "generate and display QR-Codes!"

    def show_qrimg(self, text, size):
        if len(text) == 0:
            # qrencode wrapper does not like empty strings.
            return
        if len(text) > 1024:
            # qrencode wrapper does not like very large strings.
            text = text[:1024]

        self.plaintext.setText(text)
        _, _, pil_img = qrencode.encode_scaled(text, level=3, size=size)
        qpix = pil_to_qpixmap(pil_img)
        self.qrcode_widget.setPixmap(qpix)

    def suggest_size(self):
        w = self.qrcode_widget.size().width()
        h = self.qrcode_widget.size().height()
        s = min(w, h)
        return s

    def update_qrcode(self):
        text = unicode(self.plaintext.text())
        s = self.suggest_size()
        self.show_qrimg(text, s)

    def show(self):
        """Show the dialog, but refresh the various models first.
        """
        # Wrong order, but label gets resized here, and we need the new size...
        QtGui.QDialog.show(self)
        self.show_qrimg(self.default_text, self.suggest_size());

        # select inital text
        self.plaintext.selectAll()

def main():
    app = QtGui.QApplication(sys.argv)
    if len(sys.argv) > 1:
        text = " ".join(sys.argv[1:])
    else:
        text = None
    dlg = CuterCodeDialog(default_text=text)
    dlg.show()
    return app.exec_()

if __name__ == '__main__':
    sys.exit(main())
